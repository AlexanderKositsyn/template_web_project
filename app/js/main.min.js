/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*-----Импорты модулей-----*/

var _accordeon = _interopRequireDefault(__webpack_require__(1));

var _feeds = _interopRequireDefault(__webpack_require__(2));

var _form = _interopRequireDefault(__webpack_require__(3));

var _hamburger_menu = _interopRequireDefault(__webpack_require__(4));

var _modal = _interopRequireDefault(__webpack_require__(5));

var _onePageScroll = _interopRequireDefault(__webpack_require__(6));

var _slider = _interopRequireDefault(__webpack_require__(7));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// проверка с какого браузера сидит пользователь
var md = new MobileDetect(window.navigator.userAgent); // создание нового объекта от конструктора OnaPageScroll

var OPS = new _onePageScroll.default({
  querySelectorWrapper: ".wrapper",
  queryOPSList: ".maincontent",
  queryOPSItems: ".section",
  OPScurrnetItem: 0,
  querySelectorPagination: ".pagination",
  querySelectorPaginationItem: ".pagination__item"
}, md); // иницилизация его (в нее входит проверка наличия элементов на странице, а также установка обработчика на document)

OPS.init();
/*-----Аккордеон для секции team------*/

(function () {
  var teamAccordeon = document.getElementById("team__accordeon");

  if (teamAccordeon) {
    teamAccordeon.addEventListener("click", (0, _accordeon.default)(".team__accordeon-item", "team__accordeon-item--active"));
    teamAccordeon.addEventListener("thouchstart", (0, _accordeon.default)(".team__accordeon-item", "team__accordeon-item--active"));
  }
})();
/*-----Аккордеон для секции menu------*/


(function () {
  var menu = document.getElementById("menu");

  if (menu) {
    menu.addEventListener("click", (0, _accordeon.default)(".menu__item", "menu__item--active"));
  }
})(); //иницилизация отзывов


(0, _feeds.default)(_modal.default); //иницилизация формы

(0, _form.default)(_modal.default); //иницилизация формы

(0, _hamburger_menu.default)(); //иницилизация слайдера

(0, _slider.default)(md); // подключение яндекс карт

(function () {
  ymaps.ready(init);

  function init() {
    var myMap = new ymaps.Map("map", {
      center: [59.92835943, 30.32644111],
      zoom: 12,
      controls: []
    });
    var marker = "/img/map-marker.png";
    myMap.behaviors.disable("scrollZoom");
    var coords = [[59.95415993442389, 30.412447935989327], [59.9444854, 30.38450602], [59.88751101, 30.32545451], [59.90993322, 30.49436931]],
        myCollection = new ymaps.GeoObjectCollection({}, {
      iconLayout: "default#image",
      iconImageHref: marker,
      iconImageSize: [46, 57],
      iconImageOffset: [-24, -54]
    });

    for (var i = 0; i < coords.length; i++) {
      myCollection.add(new ymaps.Placemark(coords[i]));
    }

    myMap.geoObjects.add(myCollection);
  }
})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = accordeonInit;

function accordeonInit(classAccordeonItem, classAccordeonActiveItem) {
  return function accordeonIt(e) {
    e.preventDefault();
    var $this = this,
        accordeonItems = $this.children,
        target = e.target,
        accordeonItem = target.closest(classAccordeonItem); // имеет или нет кликнутый элемент активный класс?

    if (accordeonItem.classList.contains(classAccordeonActiveItem)) {
      //если имеет то скрыть
      accordeonItem.classList.remove(classAccordeonActiveItem);
    } else {
      //если не имеет то есть два варианта
      //1) если есть у друго элемента, то найти его и скрыть;
      //2) если нет ни у кого то просто откыть кликнутый;
      // и там и там открываем кликнутый
      if ($this.querySelector(".".concat(classAccordeonActiveItem))) {
        $this.querySelector(".".concat(classAccordeonActiveItem)).classList.remove(classAccordeonActiveItem);
      }

      accordeonItem.classList.add(classAccordeonActiveItem);
    }
  };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = feedsInit;

// принимает фукнцию которая открывает модальное окно
function feedsInit(modalOpen) {
  // иницализуруем у каждого объекта dotdotdot с параметрами
  $(".feeds__desc").each(function (index, item) {
    $(item).dotdotdot({
      keep: ".feeds__more-info",
      watch: "window"
    });
  });

  (function () {
    var feeds_section = document.querySelector(".feeds-section");
    var feeds__text, feeds__title; //модалка для отзывов

    if (feeds_section) {
      // обработчик на всю секцию если нажали на кнопку
      feeds_section.addEventListener("click", function (e) {
        e.preventDefault();
        var target = e.target; //обработчик на кнопку "подробнее"

        if (target.classList.contains("feeds__more-info")) {
          // находим для кликнутого элемента его api у dotdotdot
          var dotdotdotApi = $(target).siblings(".feeds__desc").data("dotdotdot"); // разворачиваем весь текст чтобы его скопировать (	When truncated, restore )

          dotdotdotApi.restore(); // формируем текст для модалки

          feeds__text = target.closest(".feeds__hided").querySelector(".feeds__desc").textContent;
          feeds__title = target.closest(".feeds__hided").querySelector(".feeds__title").textContent; // вызываем функцию модалку

          modalOpen(".modal__feeds", feeds__title, feeds__text); // Сворачивам обратно текст чтобы он стал с  тремя точками  (Not truncated, truncate)

          dotdotdotApi.truncate(); // даем плагину команду чтобы следил за изменением монитора и либо увеличивал, либо уменьшал слова в блоке

          dotdotdotApi.watch();
        }
      });
    }
  })();
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formInit;

// принимает фукнцию которая открывает модальное окно
function formInit(modalOpen) {
  //только в этом файле для упращения ajax используется jquery (его нужно переписать на нативный js)
  var submitForm = function submitForm(e) {
    e.preventDefault();
    var form = $(e.target);
    var data = $(e.target).serialize();
    var url = form.attr("action");
    console.log(form);
    console.log(data);
    console.log(url);
    var req = $.ajax("order.php", {
      type: "POST",
      url: url,
      data: data,
      dataType: "JSON"
    });
    req.done(function (response) {
      console.log("in done");
      var message = response.message,
          status = response.status; //отправка сообщения в модальное окно

      modalOpen(".modal__form", response.status, response.message); //отчистка формы

      document.getElementById("order-form").reset();
    });
    req.fail(function (jqXHR, textStatus) {
      alert("request failed: " + textStatus);
    });
  };

  $("#order-form").on("submit", submitForm);
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hamburgerMenu;

function hamburgerMenu() {
  var hamMenu = document.querySelector(".hamburger");

  if (hamMenu) {
    hamMenu.addEventListener("click", function (e) {
      e.preventDefault();
      document.querySelector(".hamburger-menu").classList.toggle("hamburger-menu--active");
      document.querySelector(".logo").classList.toggle("logo--active");
      document.querySelector(".hamburger").classList.toggle("hamburger--active");
      document.querySelector(".pagination").classList.toggle("pagination--active");
      document.querySelector("body").classList.toggle("body--active"); //класс чтобы не было скролла

      document.querySelector(".maincontent").classList.toggle("maincontent--active-menu");
    });
  }
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = modalOpen;

/**
 * Открывает модальное окно исходя из переданных параметров.
 * @param {string} modalName - Query селектор модалки, зависит от секции.
 * @param {string} modalTitle - Текст тайтла модалки.
 * @param {string} modalText - Текст тела модалки.
 */
function modalOpen(modalName, modalTitle, modalText) {
  modalName = document.querySelector(modalName); //отображаем модалку

  modalName.style.display = "block"; //добавляем текст в модалку

  modalName.querySelector(".modal__title").innerHTML = modalTitle;
  modalName.querySelector(".modal__text").innerHTML = modalText; //после открытия модалки для закрытия  ее вешаем обработчик на секцию

  var isDisplay = function isDisplay(e) {
    if (modalName.style.display === "block") {
      modalName.style.display = "none";
      modalName.closest(".section").removeEventListener("click", isDisplay);
    }
  };

  modalName.closest(".section").addEventListener("click", isDisplay); //обработчик на крестик закрытия

  modalName.querySelector(".modal__exit").addEventListener("click", function () {
    modalName.style.display = "none";
  });
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Создает новый объект для onepagescroll
 * @param {Object} options - объект, который описывает все параметры onepagescroll.
 * @param {string} options.querySelectorWrapper - query селектор враппера, который должен строять на месте.
 * @param {string} options.queryOPSList - query селектор списка, который будет двигаться абсолютом.
 * @param {string} options.queryOPSItems - query селектор итемов списка.
 * @param {number} options.OPScurrnetItem - начальная позиция слайдера.
 * @param {number} options.querySelectorPagination - query селектор списка пагинации (или любого другого индикатора).
 * @param {number} options.querySelectorPaginationItem - query селектор точек(итемов) пагинации (или любого другого индикатора).
 * @param {boolean} md - переменная которая говрит с какого устройсва сидит пользователь.
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnePageScroll;

function OnePageScroll() {
  var _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var md = arguments.length > 1 ? arguments[1] : undefined;
  //св ва для onepagescroll как для слайдера
  this.wrapper = document.querySelector(options.querySelectorWrapper);
  this.OPSList = this.wrapper.querySelector(options.queryOPSList);
  this.OPSItems = this.wrapper.querySelectorAll(options.queryOPSItems);
  this.OPScurrnetItem = options.OPScurrnetItem || 0; // св ва для пагинации(точки сбоку)

  this.pagination = document.querySelector(options.querySelectorPagination);
  this.paginationItems = this.wrapper.querySelectorAll(options.querySelectorPaginationItem); //метод иницализации слайдера

  this.init = function () {
    //проверка что оболочка для onepagescroll есть
    if (_this.wrapper) {
      if (md.mobile()) {
        document.addEventListener("touchstart", _this.mobileListener);
        document.addEventListener("touchend", _this.mobileListener);
        document.addEventListener("touchmove", _this.mobileListener);
      } else {
        _this.wrapper.addEventListener("wheel", _this.pcListener);

        document.addEventListener("keydown", _this.pcListener);
        document.addEventListener("touchmove", _this.pcListener);
        document.addEventListener("click", _this.pcListener);
      }
    }
  }; // метод возвращающий новый индекс в зависимотсти от произошедшего события


  this.nextItem = function (item) {
    if (_this.objEvent.target.getAttribute("data-scroll-to")) {
      item = +_this.objEvent.target.getAttribute("data-scroll-to");
    }

    if (_this.objEvent.deltaY > 0 || _this.objEvent.keyCode == 40 || _this.direction == "down") {
      _this.objEvent.preventDefault();

      item != _this.OPSItems.length - 1 ? item = item + 1 : void 0;
    }

    if (_this.objEvent.deltaY < 0 || _this.objEvent.keyCode == 38 || _this.direction == "up") {
      _this.objEvent.preventDefault();

      item != 0 ? item = item - 1 : void 0;
    }

    return item;
  }; // функция которая перемещает слайды в зависимоти от index


  this.moveTo = function (index) {
    _this.OPSList.style.top = -index * 100 + "%";
  }; // функция изменения активного класса на секциях слайдера


  this.changeSectionActiveClasses = function (sectionActiveClass) {
    _this.wrapper.querySelector(".".concat(sectionActiveClass)).classList.remove(sectionActiveClass);

    _this.OPSItems[_this.OPScurrnetItem].classList.add(sectionActiveClass);
  }; // функция изменения активного класса на пагинации


  this.changePaginationActiveClasses = function (paginationActiveClass) {
    _this.pagination.querySelector(".".concat(paginationActiveClass)).classList.remove(paginationActiveClass);

    _this.paginationItems[_this.OPScurrnetItem].classList.add(paginationActiveClass);
  }; // обработчик для мобильника


  this.mobileListener = function (e) {
    //записываю в объект  - объект события, чтобы другие фукнции могли его тоже взять из объекта
    _this.objEvent = e; // сначала сохраняем значение первого тыка

    if (_this.objEvent.type == "touchstart") {
      _this.ts = _this.objEvent.touches["0"].clientY;
    } // потом сохраняем второго и тут же сравниваем и делаем смещение onepagescroll


    if (_this.objEvent.type == "touchend") {
      _this.te = _this.objEvent.changedTouches["0"].clientY; // условие чтобы при малейшем свайпе не листался ops
      // deltaOPS определяет порог через который свой будет произведен

      _this.deltaOPS = 200;

      if (Math.abs(_this.ts - _this.te) > _this.deltaOPS) {
        _this.ts > _this.te ? _this.direction = "down" : _this.direction = "up";
      } else {
        _this.direction = void 0;
      } //строка вызывающас функция, которая изменяющет переменную текущего слайда  (для мобилок: сравниваем со старым и делаем перемещение)


      _this.OPScurrnetItem = _this.nextItem(_this.OPScurrnetItem); // изменяем активный класс на секции

      _this.changeSectionActiveClasses("section--active"); // изменяем активный класс на пагинации


      _this.changePaginationActiveClasses("pagination__item--active"); // вызов функции которая премещает список с section


      _this.moveTo(_this.OPScurrnetItem);
    }
  }; // обработчик на слайдер для pc


  this.pcListener = function (e) {
    // записываю в объект - таргет события, чтобы другие функции в объекте могли его взять из объкта
    _this.target = e.target; //записываю в объект  - объект события, чтобы другие фукнции могли его тоже взять из объекта

    _this.objEvent = e; //переменная чтобы не потерять контекст вызова функции в setTimeout

    var $this = _this; //строка вызывающас функция, которая изменяющет переменную текущего слайда  (для мобилок: сравниваем со старым и делаем перемещение)

    _this.OPScurrnetItem = _this.nextItem(_this.OPScurrnetItem); // изменяем активный класс на секции

    _this.changeSectionActiveClasses("section--active"); // изменяем активный класс на пагинации


    _this.changePaginationActiveClasses("pagination__item--active"); //убираем активные классы с выпадающего меню (если клик был по нему)


    if (_this.target.classList.contains("hamburger-menu__link")) {
      document.querySelector(".hamburger-menu--active").classList.remove("hamburger-menu--active");
      document.querySelector(".hamburger--active").classList.remove("hamburger--active");
      document.querySelector(".logo--active").classList.remove("logo--active");
      document.querySelector(".pagination--active").classList.remove("pagination--active"); //класс чтобы не было скролла

      document.querySelector(".maincontent").classList.remove("maincontent--active-menu");
    } // вызов функции которая премещает список с section


    _this.moveTo(_this.OPScurrnetItem); // удаляем обработчик с через время ставим его опять,
    // для того чтобы событие не срабатывало много раз при прокрутке мышкой или тачпадом


    _this.wrapper.removeEventListener("wheel", _this.pcListener);

    setTimeout(function () {
      $this.wrapper.addEventListener("wheel", $this.pcListener);
    }, 1000); // функция убирает ops

    _this.remove = function () {
      if (_this.wrapper) {
        if (md.mobile()) {
          document.removeEventListener("touchstart", _this.mobileListener);
          document.removeEventListener("touchend", _this.mobileListener);
          document.removeEventListener("touchmove", _this.mobileListener);
        } else {
          _this.wrapper.removeEventListener("wheel", _this.pcListener);

          document.removeEventListener("keydown", _this.pcListener);
          document.removeEventListener("touchmove", _this.pcListener);
          document.removeEventListener("click", _this.pcListener);
        }
      }
    };
  };
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sliderInit;

function sliderInit(md) {
  var _this = this;

  var slider = document.querySelector(".slider"),
      currnetItem = 0;

  var sliderListener = function sliderListener(e) {
    var $this = _this,
        sliderWrap = slider.querySelector(".slider__wrap"),
        sliderList = slider.querySelector(".slider__list"),
        sliderItems = slider.querySelectorAll(".slider__item"),
        target = e.target;

    function nextCurrentItem(currnetItem) {
      if (target.classList.contains("slider__right-button") || target.classList.contains("slider__right-arrow")) {
        currnetItem != sliderItems.length - 1 ? currnetItem++ : currnetItem = 0;
      }

      if (target.classList.contains("slider__left-button") || target.classList.contains("slider__left-arrow")) {
        currnetItem != 0 ? currnetItem-- : currnetItem = sliderItems.length - 1;
      }

      return currnetItem;
    }

    currnetItem = nextCurrentItem(currnetItem);
    sliderWrap.querySelector(".slider__item--active").classList.remove("slider__item--active");
    sliderItems[currnetItem].classList.add("slider__item--active");
    sliderList.style.left = -currnetItem * 100 + "%";
  };

  if (slider) {
    if (md.mobile()) {
      slider.addEventListener("touchstart", sliderListener);
    } else {
      slider.addEventListener("click", sliderListener);
    }
  }
}

/***/ })
/******/ ]);